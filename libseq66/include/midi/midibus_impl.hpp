#if ! defined SEQ66_MIDIBUS_HPP
#define SEQ66_MIDIBUS_HPP

/*
 *  This file is part of seq66.
 *
 *  seq66 is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  seq66 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with seq66; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/**
 * \file          midibus.hpp
 *
 *  This module declares the right version of the midibus header for the
 *  current API.
 *
 * \library       seq66 application
 * \author        Chris Ahlstrom
 * \date          2016-11-28
 * \updates       2019-01-27
 * \license       GNU GPLv2 or above
 *
 */

#include <memory>                       /* std::unique_ptr<>                */

#include "seq66-config.h"               /* generated by configure           */
#include "midi/midibase.hpp"            /* seq66::midibase & midipulse      */

#undef USE_PIMPL_MIDIBUS

#if ! defined USE_PIMPL_MIDIBUS

#if defined SEQ66_RTMIDI_SUPPORT
#include "midibus_rm.hpp"               /* seq66::midibus for RtMidi        */
#elif defined SEQ66_PORTMIDI_SUPPORT || defined SEQ66_WINDOWS_SUPPORT
#include "midibus_pm.hpp"               /* seq66::midibus, PortMidi         */
#else
#include "midibus_rm.hpp"               /* seq66::midibus for RtMidi        */
#endif

#else       // USE_PIMPL_MIDIBUS

/*
 *  Do not document a namespace; it breaks Doxygen.
 */

namespace seq66
{

class event;

/**
 *  The class that "supervises" all of the midibus objects?
 */

class midibus : public midibase
{
    class midibus_impl;

private:

    /**
     *  The master MIDI bus sets up the buss, so it gets access to private
     *  details.
     */

    friend class mastermidibus;

    /**
     *  Points to the actual implementation of the midibus, for either our
     *  portmidi-based or rtmidi-based libraries.
     */

    std::unique_ptr<midibus_impl> m_midi_bus_impl;

public:

    /*
     * Virtual-port and non-virtual-port constructor.
     */

    explicit midibus
    (
        std::unique_ptr<midibus_impl> && impl = nullptr
    );

    virtual ~midibus ();

    /* virtual */ bool api_connect ();

protected:

    /* virtual */ bool api_init_in ();
    /* virtual */ bool api_init_in_sub ();
    /* virtual */ bool api_init_out ();
    /* virtual */ bool api_init_out_sub ();
    /* virtual */ bool api_deinit_in ();
    /* virtual */ bool api_get_midi_event (event * inev);
    /* virtual */ int api_poll_for_midi ();
    /* virtual */ void api_continue_from (midipulse tick, midipulse beats);
    /* virtual */ void api_start ();
    /* virtual */ void api_stop ();
    /* virtual */ void api_clock (midipulse tick);
    /* virtual */ void api_play (event * e24, midibyte channel);

};          // class mastermidibase

}           // namespace seq66

#endif      // USE_PIMPL_MIDIBUS

#endif      // SEQ66_MIDIBUS_HPP

/*
 * midibus.hpp
 *
 * vim: sw=4 ts=4 wm=4 et ft=cpp
 */

