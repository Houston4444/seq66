/*
 *    This module provides no code.  It provides only a Doxygen "Doxygen
 *    information" page.
 */

/**

\file       condvars.dox

This document describes some issues and scenarios involving the use of condition
variables and mutexes in Seq66.

\page       condvars_page Condition Variables in Seq66
\author     Chris Ahlstrom 2019-04-22

\section condvars_intro Introduction

This section describes the ...

Seq66 needs a mutex and a condition-variable for sequencer operations.
Here is how they need to be used, courtesy of cppreference.com.

The std::condition_variable class is a synchronization primitive that can
block a thread, or multiple threads at the same time, until another
thread both modifies a shared variable (the condition), and notifies the
std::condition_variable.  The thread that intends to modify the variable has
to:

-#	Acquire a std::mutex (typically via std::lock_guard).
-#	Perform the modification while the lock is held.
-#	Execute notify_one() or notify_all() on the std::condition_variable (the
    lock does not need to be held for notification).

 Even if the shared variable is atomic, it must be modified under the mutex
 in order to correctly publish the modification to the waiting thread.
 Any thread that intends to wait on std::condition_variable has to

 -#  Acquire a lock on the same mutex as used to protect the shared
     variable.
 -#  Execute wait, wait_for, or wait_until. The wait operations atomically
     release the mutex and suspend the execution of the thread.
 -#  When the condition variable is notified, a timeout expires, or a
     spurious wakeup occurs, the thread is awakened, and the mutex is
     atomically reacquired. The thread should then check the condition and
     resume waiting if the wake up was spurious.

 Condition variables permit concurrent invocation of the wait, wait_for,
 wait_until, notify_one and notify_all member functions.

 The effects of notify_one()/notify_all() and each of the three atomic parts
 of wait()/wait_for()/wait_until() (unlock+wait, wakeup, and lock) take place
 in a single total order that can be viewed as modification order of an
 atomic variable: the order is specific to the std::condition_variable. This
 makes it impossible for notify_one() to, for example, be delayed and unblock
 a thread that started waiting just after the call to notify_one() was made.

 The notifying thread does not need to hold the lock on the same mutex as the
 one held by the waiting thread(s); in fact doing so is a pessimization,
 since the notified thread would immediately block again, waiting for the
 notifying thread to release the lock. However, some implementations (in
 particular many implementations of pthreads) recognize this situation and
 avoid this "hurry up and wait" scenario by transferring the waiting thread
 from the condition variable's queue directly to the queue of the mutex
 within the notify call, without waking it up.
 
 Notifying while under the lock may nevertheless be necessary when precise
 scheduling of events is required, e.g. if the waiting thread would exit the
 program if the condition is satisfied, causing destruction of the notifying
 thread's std::condition_variable. A spurious wakeup after mutex unlock but
 before notify would result in notify called on a destroyed object.

\section condvars_references Condition Variable References

<ul>
   <li> http://vagar.org/wordpress/?tag=jack-midi
</ul>

 */

/*
 * condvars.dox
 *
 * vim: ts=3 sw=3 et syntax=doxygen
 */
